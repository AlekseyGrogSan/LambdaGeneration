// <auto-generated />
using System;
using LambdaGeneration.API.Date;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LambdaGeneration.API.Date.Migrations
{
    [DbContext(typeof(LambdaGenerationDbContext))]
    partial class LambdaGenerationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LambdaGeneration.API.Date.Entities.ArticlesEntity", b =>
                {
                    b.Property<Guid>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArticlePreview")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int[]>("ArticleTags")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uuid");

                    b.Property<int>("CountComments")
                        .HasColumnType("integer");

                    b.Property<int>("CountLikes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ArticleID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("LambdaGeneration.API.Date.Entities.UsersEntity", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("countArticles")
                        .HasColumnType("integer");

                    b.Property<int>("countSubscribers")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.ToTable("UsersEntity");
                });

            modelBuilder.Entity("LambdaGeneration.API.Date.Entities.ArticlesEntity", b =>
                {
                    b.HasOne("LambdaGeneration.API.Date.Entities.UsersEntity", null)
                        .WithMany("Articles")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LambdaGeneration.API.Date.Entities.UsersEntity", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
